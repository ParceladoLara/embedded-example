/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppShellRouteImport } from './routes/_appShell'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppShellPatientsIndexRouteImport } from './routes/_appShell/patients/index'
import { Route as AppShellLaraIndexRouteImport } from './routes/_appShell/lara/index'
import { Route as AppShellHomeIndexRouteImport } from './routes/_appShell/home/index'
import { Route as AppShellAppointmentsIndexRouteImport } from './routes/_appShell/appointments/index'
import { Route as AppShellAppointmentsCreateIndexRouteImport } from './routes/_appShell/appointments/create/index'
import { Route as AppShellLaraProposalInitializeAppointmentIdIndexRouteImport } from './routes/_appShell/lara-proposal/initialize/$appointmentId/index'
import { Route as AppShellAppointmentsConfirmIdIndexRouteImport } from './routes/_appShell/appointments/confirm/$id/index'

const AppShellRoute = AppShellRouteImport.update({
  id: '/_appShell',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppShellPatientsIndexRoute = AppShellPatientsIndexRouteImport.update({
  id: '/patients/',
  path: '/patients/',
  getParentRoute: () => AppShellRoute,
} as any)
const AppShellLaraIndexRoute = AppShellLaraIndexRouteImport.update({
  id: '/lara/',
  path: '/lara/',
  getParentRoute: () => AppShellRoute,
} as any)
const AppShellHomeIndexRoute = AppShellHomeIndexRouteImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => AppShellRoute,
} as any)
const AppShellAppointmentsIndexRoute =
  AppShellAppointmentsIndexRouteImport.update({
    id: '/appointments/',
    path: '/appointments/',
    getParentRoute: () => AppShellRoute,
  } as any)
const AppShellAppointmentsCreateIndexRoute =
  AppShellAppointmentsCreateIndexRouteImport.update({
    id: '/appointments/create/',
    path: '/appointments/create/',
    getParentRoute: () => AppShellRoute,
  } as any)
const AppShellLaraProposalInitializeAppointmentIdIndexRoute =
  AppShellLaraProposalInitializeAppointmentIdIndexRouteImport.update({
    id: '/lara-proposal/initialize/$appointmentId/',
    path: '/lara-proposal/initialize/$appointmentId/',
    getParentRoute: () => AppShellRoute,
  } as any)
const AppShellAppointmentsConfirmIdIndexRoute =
  AppShellAppointmentsConfirmIdIndexRouteImport.update({
    id: '/appointments/confirm/$id/',
    path: '/appointments/confirm/$id/',
    getParentRoute: () => AppShellRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/appointments': typeof AppShellAppointmentsIndexRoute
  '/home': typeof AppShellHomeIndexRoute
  '/lara': typeof AppShellLaraIndexRoute
  '/patients': typeof AppShellPatientsIndexRoute
  '/appointments/create': typeof AppShellAppointmentsCreateIndexRoute
  '/appointments/confirm/$id': typeof AppShellAppointmentsConfirmIdIndexRoute
  '/lara-proposal/initialize/$appointmentId': typeof AppShellLaraProposalInitializeAppointmentIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/appointments': typeof AppShellAppointmentsIndexRoute
  '/home': typeof AppShellHomeIndexRoute
  '/lara': typeof AppShellLaraIndexRoute
  '/patients': typeof AppShellPatientsIndexRoute
  '/appointments/create': typeof AppShellAppointmentsCreateIndexRoute
  '/appointments/confirm/$id': typeof AppShellAppointmentsConfirmIdIndexRoute
  '/lara-proposal/initialize/$appointmentId': typeof AppShellLaraProposalInitializeAppointmentIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_appShell': typeof AppShellRouteWithChildren
  '/_appShell/appointments/': typeof AppShellAppointmentsIndexRoute
  '/_appShell/home/': typeof AppShellHomeIndexRoute
  '/_appShell/lara/': typeof AppShellLaraIndexRoute
  '/_appShell/patients/': typeof AppShellPatientsIndexRoute
  '/_appShell/appointments/create/': typeof AppShellAppointmentsCreateIndexRoute
  '/_appShell/appointments/confirm/$id/': typeof AppShellAppointmentsConfirmIdIndexRoute
  '/_appShell/lara-proposal/initialize/$appointmentId/': typeof AppShellLaraProposalInitializeAppointmentIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/appointments'
    | '/home'
    | '/lara'
    | '/patients'
    | '/appointments/create'
    | '/appointments/confirm/$id'
    | '/lara-proposal/initialize/$appointmentId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/appointments'
    | '/home'
    | '/lara'
    | '/patients'
    | '/appointments/create'
    | '/appointments/confirm/$id'
    | '/lara-proposal/initialize/$appointmentId'
  id:
    | '__root__'
    | '/'
    | '/_appShell'
    | '/_appShell/appointments/'
    | '/_appShell/home/'
    | '/_appShell/lara/'
    | '/_appShell/patients/'
    | '/_appShell/appointments/create/'
    | '/_appShell/appointments/confirm/$id/'
    | '/_appShell/lara-proposal/initialize/$appointmentId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppShellRoute: typeof AppShellRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_appShell': {
      id: '/_appShell'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppShellRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_appShell/patients/': {
      id: '/_appShell/patients/'
      path: '/patients'
      fullPath: '/patients'
      preLoaderRoute: typeof AppShellPatientsIndexRouteImport
      parentRoute: typeof AppShellRoute
    }
    '/_appShell/lara/': {
      id: '/_appShell/lara/'
      path: '/lara'
      fullPath: '/lara'
      preLoaderRoute: typeof AppShellLaraIndexRouteImport
      parentRoute: typeof AppShellRoute
    }
    '/_appShell/home/': {
      id: '/_appShell/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AppShellHomeIndexRouteImport
      parentRoute: typeof AppShellRoute
    }
    '/_appShell/appointments/': {
      id: '/_appShell/appointments/'
      path: '/appointments'
      fullPath: '/appointments'
      preLoaderRoute: typeof AppShellAppointmentsIndexRouteImport
      parentRoute: typeof AppShellRoute
    }
    '/_appShell/appointments/create/': {
      id: '/_appShell/appointments/create/'
      path: '/appointments/create'
      fullPath: '/appointments/create'
      preLoaderRoute: typeof AppShellAppointmentsCreateIndexRouteImport
      parentRoute: typeof AppShellRoute
    }
    '/_appShell/lara-proposal/initialize/$appointmentId/': {
      id: '/_appShell/lara-proposal/initialize/$appointmentId/'
      path: '/lara-proposal/initialize/$appointmentId'
      fullPath: '/lara-proposal/initialize/$appointmentId'
      preLoaderRoute: typeof AppShellLaraProposalInitializeAppointmentIdIndexRouteImport
      parentRoute: typeof AppShellRoute
    }
    '/_appShell/appointments/confirm/$id/': {
      id: '/_appShell/appointments/confirm/$id/'
      path: '/appointments/confirm/$id'
      fullPath: '/appointments/confirm/$id'
      preLoaderRoute: typeof AppShellAppointmentsConfirmIdIndexRouteImport
      parentRoute: typeof AppShellRoute
    }
  }
}

interface AppShellRouteChildren {
  AppShellAppointmentsIndexRoute: typeof AppShellAppointmentsIndexRoute
  AppShellHomeIndexRoute: typeof AppShellHomeIndexRoute
  AppShellLaraIndexRoute: typeof AppShellLaraIndexRoute
  AppShellPatientsIndexRoute: typeof AppShellPatientsIndexRoute
  AppShellAppointmentsCreateIndexRoute: typeof AppShellAppointmentsCreateIndexRoute
  AppShellAppointmentsConfirmIdIndexRoute: typeof AppShellAppointmentsConfirmIdIndexRoute
  AppShellLaraProposalInitializeAppointmentIdIndexRoute: typeof AppShellLaraProposalInitializeAppointmentIdIndexRoute
}

const AppShellRouteChildren: AppShellRouteChildren = {
  AppShellAppointmentsIndexRoute: AppShellAppointmentsIndexRoute,
  AppShellHomeIndexRoute: AppShellHomeIndexRoute,
  AppShellLaraIndexRoute: AppShellLaraIndexRoute,
  AppShellPatientsIndexRoute: AppShellPatientsIndexRoute,
  AppShellAppointmentsCreateIndexRoute: AppShellAppointmentsCreateIndexRoute,
  AppShellAppointmentsConfirmIdIndexRoute:
    AppShellAppointmentsConfirmIdIndexRoute,
  AppShellLaraProposalInitializeAppointmentIdIndexRoute:
    AppShellLaraProposalInitializeAppointmentIdIndexRoute,
}

const AppShellRouteWithChildren = AppShellRoute._addFileChildren(
  AppShellRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppShellRoute: AppShellRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
